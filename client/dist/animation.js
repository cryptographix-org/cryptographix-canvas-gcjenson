define(["require", "exports"], function (require, exports) {
    var Animation = (function () {
        function Animation() {
        }
        Animation.zoomIn = function (nodeToZoom, nodes, zoomLevel) {
            jsPlumb.setDraggable(nodeToZoom.id, false);
            var nodeElement = document.getElementById(nodeToZoom.id);
            nodeElement.style.width = (parseInt(nodeElement.style.width) * zoomLevel) + "px";
            nodeElement.style.height = (parseInt(nodeElement.style.height) * zoomLevel) + "px";
            nodeElement.style.borderRadius = (20 * zoomLevel) + "px";
            this.setFonts("component-name", zoomLevel);
            var zoomedOldX = parseInt(nodeElement.style.left);
            var zoomedOldY = parseInt(nodeElement.style.top);
            var zoomedNewX = (screen.width / 2) - ((zoomLevel * 100) / 2);
            var zoomedNewY = (screen.height / 2) - ((zoomLevel * 100) / 1.5);
            var deltaX = zoomedNewX - zoomedOldX;
            var deltaY = zoomedNewY - zoomedOldY;
            jsPlumb.animate(nodeToZoom.id, {
                "left": zoomedNewX,
                "top": zoomedNewY,
                "height": nodeElement.style.height,
                "width": nodeElement.style.width
            }, {
                duration: "400"
            }, {
                step: function () {
                    jsPlumb.repaintEverything();
                }
            });
            var otherNodes = nodes.filter(function (node) {
                return node.id !== nodeToZoom.id;
            });
            for (var _i = 0; _i < otherNodes.length; _i++) {
                var node = otherNodes[_i];
                jsPlumb.setDraggable(node.id, false);
                nodeElement = document.getElementById(node.id);
                nodeElement.style.width = (parseInt(nodeElement.style.width) * zoomLevel) + "px";
                nodeElement.style.height = (parseInt(nodeElement.style.height) * zoomLevel) + "px";
                nodeElement.style.borderRadius = (parseInt(nodeElement.style.borderRadius) * zoomLevel) + "px";
                var oldX = parseInt(nodeElement.style.left);
                var oldY = parseInt(nodeElement.style.top);
                var newX = oldX + deltaX + ((zoomLevel - 1) * (oldX - zoomedOldX));
                var newY = oldY + deltaY + ((zoomLevel - 1) * (oldY - zoomedOldY));
                jsPlumb.animate(node.id, {
                    "left": newX,
                    "top": newY,
                    "height": nodeElement.style.height,
                    "width": nodeElement.style.width
                }, { duration: "400" }, {
                    step: function () {
                        jsPlumb.repaintEverything();
                    }
                });
            }
        };
        Animation.zoomOut = function (nodes) {
            for (var _i = 0; _i < nodes.length; _i++) {
                var node = nodes[_i];
                jsPlumb.setDraggable(node.id, true);
                var nodeElement = document.getElementById(node.id);
                nodeElement.style.width = "100px";
                nodeElement.style.height = "100px";
                nodeElement.style.borderRadius = "20px";
                this.setFonts("component-name", 1);
                jsPlumb.animate(node.id, {
                    "left": parseInt(node.metadata.view.x),
                    "top": parseInt(node.metadata.view.y),
                    "height": "100px",
                    "width": "400px"
                }, { duration: "400" }, {
                    step: function () {
                        jsPlumb.repaintEverything();
                    }
                });
            }
        };
        Animation.setFonts = function (className, zoomFactor) {
            var componentLabels = document.getElementsByClassName(className);
            for (var _i = 0; _i < componentLabels.length; _i++) {
                var label = componentLabels[_i];
                label.style.fontSize = (40 * zoomFactor) + "px";
                label.style.marginTop = (17 * zoomFactor) + "px";
            }
        };
        return Animation;
    })();
    exports.Animation = Animation;
});

//# sourceMappingURL=data:application/json;base64,
