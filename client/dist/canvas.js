var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
define(["require", "exports", 'aurelia-framework', 'aurelia-dialog', './link-config-dialog', './add-node-dialog', 'cryptographix-sim-core', './animation'], function (require, exports, aurelia_framework_1, aurelia_dialog_1, link_config_dialog_1, add_node_dialog_1, cryptographix_sim_core_1, animation_1) {
    var Canvas = (function () {
        function Canvas(taskQueue, dialogService) {
            this.nodes = [];
            this.isDragging = false;
            this.nodeStyle = "regular";
            this.taskQueue = taskQueue;
            this.dialogService = dialogService;
        }
        Canvas.prototype.attached = function () {
            var _this = this;
            this.network.loadComponents().then(function () {
                _this.network.initialize();
                _this.network.graph.nodes.forEach(function (node) {
                    _this.nodes.push(node);
                });
                _this.taskQueue.queueMicroTask({
                    call: function () { return _this.setUpGraphUI(); }
                });
            });
        };
        Canvas.prototype.detached = function () {
            this.unregisterEvents();
            jsPlumb.detachEveryConnection();
            this.removeGraph(this.network.graph);
            this.nodes = [];
        };
        Canvas.prototype.setUpGraphUI = function () {
            for (var _i = 0, _a = this.nodes; _i < _a.length; _i++) {
                var node = _a[_i];
                this.configureDomElement(node);
                this.addPortsToNode(node);
            }
            this.connectNodes(this.network.graph.links);
            this.registerEvents();
        };
        Canvas.prototype.zoom = function (node) {
            if (!this.isDragging) {
                if (!this.isZoomedIn(node)) {
                    animation_1.Animation.zoomIn(node, this.nodes, 3);
                }
                else {
                    animation_1.Animation.zoomOut(this.nodes);
                }
            }
            this.isDragging = false;
        };
        Canvas.prototype.configureDomElement = function (node) {
            var nodeElement = document.getElementById(node.id);
            nodeElement.style.left = parseInt(node.metadata.view.x) + "px";
            nodeElement.style.top = parseInt(node.metadata.view.y) + "px";
            nodeElement.style.width = parseInt(node.metadata.view.width) + "px";
            nodeElement.style.height = parseInt(node.metadata.view.height) + "px";
            var self = this;
            jsPlumb.draggable(node.id, {
                stop: function (e) {
                    node.metadata.view.x = e.pos[0];
                    node.metadata.view.y = e.pos[1];
                    self.isDragging = true;
                }
            });
        };
        Canvas.prototype.addPortsToNode = function (node) {
            var portsArray = this.sortPorts(node.ports);
            for (var _i = 0, _a = [portsArray[0], portsArray[1], portsArray[2]]; _i < _a.length; _i++) {
                var portArray = _a[_i];
                if (portArray.length > 0) {
                    for (var j = 0; j < portArray.length; j++) {
                        if (portArray[0].direction === cryptographix_sim_core_1.Direction.INOUT) {
                            var x = (1 / (portArray.length + 1)) + ((1 / (portArray.length + 1)) * j);
                            var y = 0;
                        }
                        else {
                            var x = portArray[0].direction - 1;
                            var y = (1 / (portArray.length + 1)) + ((1 / (portArray.length + 1)) * j);
                        }
                        jsPlumb.addEndpoint(node.id, {
                            uuid: node.id + "-" + portArray[j].id,
                            anchors: [[x, y]],
                            isSource: portArray[0].direction === cryptographix_sim_core_1.Direction.OUT,
                            isTarget: portArray[0].direction === cryptographix_sim_core_1.Direction.IN,
                            maxConnections: -1,
                            paintStyle: { fillStyle: "#77aca7", radius: 4 },
                            hoverPaintStyle: { fillStyle: "#77aca7", radius: 8 },
                            connectorStyle: { strokeStyle: "#77aca7", lineWidth: 4 },
                            connectorHoverStyle: { lineWidth: 8 }
                        });
                    }
                }
            }
        };
        Canvas.prototype.connectNodes = function (links) {
            links.forEach(function (link) {
                jsPlumb.connect({
                    uuids: [link.fromNode.id + "-" + link.fromPort.id, link.toNode.id + "-" + link.toPort.id],
                    endpointStyle: { fillStyle: "#77aca7", radius: 4 },
                    hoverPaintStyle: { radius: 8 },
                    paintStyle: { strokeStyle: "#77aca7", lineWidth: 4 }
                }).id = link.toObject()["id"];
            });
        };
        Canvas.prototype.registerEvents = function () {
            var self = this;
            jsPlumb.bind("connection", function (data) {
                if (self.isNewConnection(data.connection.id))
                    self.createLink(data.connection.endpoints[0].getUuid(), data.connection.endpoints[1].getUuid(), undefined);
            });
            jsPlumb.bind("connectionDetached", function (data) {
                self.removeLink(data.connection.id);
            });
            jsPlumb.bind("connectionMoved", function (data) {
                self.changeLink(data);
            });
        };
        Canvas.prototype.unregisterEvents = function () {
            jsPlumb.unbind("connection");
            jsPlumb.unbind("connectionDetached");
            jsPlumb.unbind("connectionMoved");
        };
        Canvas.prototype.sortPorts = function (ports) {
            var inOutPorts = [];
            var inPorts = [];
            var outPorts = [];
            ports.forEach(function (port) {
                if (port.direction === cryptographix_sim_core_1.Direction.INOUT) {
                    inOutPorts.push(port);
                }
                else if (port.direction === cryptographix_sim_core_1.Direction.IN) {
                    inPorts.push(port);
                }
                else {
                    outPorts.push(port);
                }
            });
            return [inOutPorts, inPorts, outPorts];
        };
        Canvas.prototype.removeGraph = function (graph) {
            graph.nodes.forEach(function (node) {
                jsPlumb.remove(node.id);
            });
        };
        Canvas.prototype.addNode = function () {
            this.dialogService.open({ viewModel: add_node_dialog_1.AddNodeDialog }).then(function (response) {
            });
        };
        Canvas.prototype.createLink = function (sourceEndPointID, targetEndPointID, linkID) {
            var _this = this;
            if (!linkID) {
                this.dialogService.open({ viewModel: link_config_dialog_1.LinkConfigDialog }).then(function (response) {
                    if (!response.wasCancelled) {
                        jsPlumb.getConnections()[jsPlumb.getConnections().length - 1].id = response.output;
                        _this.network.graph.addLink(response.output, {
                            from: { nodeID: sourceEndPointID.split("-")[0], portID: sourceEndPointID.split("-")[1] },
                            to: { nodeID: targetEndPointID.split("-")[0], portID: targetEndPointID.split("-")[1] }
                        });
                    }
                    else {
                        var connections = jsPlumb.getConnections();
                        jsPlumb.detach(connections[connections.length - 1]);
                    }
                });
            }
            else {
                this.network.graph.addLink(linkID, {
                    from: { nodeID: sourceEndPointID.split("-")[0], portID: sourceEndPointID.split("-")[1] },
                    to: { nodeID: targetEndPointID.split("-")[0], portID: targetEndPointID.split("-")[1] }
                });
            }
        };
        Canvas.prototype.removeLink = function (linkID) {
            this.network.graph.removeLink(linkID);
        };
        Canvas.prototype.changeLink = function (data) {
            this.removeLink(data.connection.id);
            this.createLink(data.originalSourceEndpoint.getUuid(), data.newTargetEndpoint.getUuid(), data.connection.id);
        };
        Canvas.prototype.isNewConnection = function (linkID) {
            var isNew;
            this.network.graph.links.forEach(function (link) {
                isNew = link.toObject()["id"] !== linkID;
            });
            return isNew;
        };
        Canvas.prototype.isZoomedIn = function (node) {
            return document.getElementById(node.id).style.width !== node.metadata.view.width;
        };
        Canvas = __decorate([
            aurelia_framework_1.autoinject,
            aurelia_framework_1.containerless(),
            aurelia_framework_1.customElement('canvas'),
            aurelia_framework_1.bindable('network'), 
            __metadata('design:paramtypes', [aurelia_framework_1.TaskQueue, aurelia_dialog_1.DialogService])
        ], Canvas);
        return Canvas;
    })();
    exports.Canvas = Canvas;
});

//# sourceMappingURL=data:application/json;base64,
